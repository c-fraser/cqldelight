package io.github.cfraser.cqldelight;

import java.lang.Object;
import java.lang.String;
import org.neo4j.driver.Query;
import org.neo4j.driver.Values;

/**
 * Cypher queries generated by <a href="https://github.com/c-fraser/cqldelight">CQLDelight</a>.
 */
public final class MovieQueries {
  /**
   * {@link Query} for the <i>Cypher</i> statement on line 3 in {@code movie.cypher}.
   */
  public static final Query FIND_TOM_HANKS = new Query("MATCH (tom:Person {\n"
      + "  name: 'Tom Hanks'\n"
      + "})\n"
      + "RETURN tom");

  /**
   * {@link Query} for the <i>Cypher</i> statement on line 7 in {@code movie.cypher}.
   */
  public static final Query FIND_CLOUD_ATLAS = new Query("MATCH (cloudAtlas:Movie {\n"
      + "  title: 'Cloud Atlas'\n"
      + "})\n"
      + "RETURN cloudAtlas");

  /**
   * {@link Query} for the <i>Cypher</i> statement on line 11 in {@code movie.cypher}.
   */
  public static final Query FIND10_PEOPLE = new Query("MATCH (people:Person)\n"
      + "RETURN people.name LIMIT 10");

  /**
   * {@link Query} for the <i>Cypher</i> statement on line 16 in {@code movie.cypher}.
   */
  public static final Query FIND_NINETIES_MOVIES = new Query("MATCH (nineties:Movie)\n"
      + "WHERE (nineties.released >= 1990\n"
      + "  AND nineties.released < 2000)\n"
      + "RETURN nineties.title");

  /**
   * {@link Query} for the <i>Cypher</i> statement on line 21 in {@code movie.cypher}.
   */
  public static final Query FIND_TOM_HANKS_MOVIES = new Query("MATCH (tom:Person {\n"
      + "  name: 'Tom Hanks'\n"
      + "})-[:ACTED_IN]->(tomHanksMovies)\n"
      + "RETURN tom, tomHanksMovies");

  /**
   * {@link Query} for the <i>Cypher</i> statement on line 25 in {@code movie.cypher}.
   */
  public static final Query FIND_WHO_DIRECTED_CLOUD_ATLAS = new Query("MATCH (cloudAtlas:Movie {\n"
      + "  title: 'Cloud Atlas'\n"
      + "})<-[:DIRECTED]-(directors)\n"
      + "RETURN directors.name");

  /**
   * {@link Query} for the <i>Cypher</i> statement on line 29 in {@code movie.cypher}.
   */
  public static final Query FIND_TOM_HANKS_CO_ACTORS = new Query("MATCH (tom:Person {\n"
      + "  name: 'Tom Hanks'\n"
      + "})-[:ACTED_IN]->(m)<-[:ACTED_IN]-(coActors)\n"
      + "RETURN DISTINCT coActors.name");

  /**
   * {@link Query} for the <i>Cypher</i> statement on line 33 in {@code movie.cypher}.
   */
  public static final Query FIND_PEOPLE_RELATED_TO_CLOUD_ATLAS = new Query("MATCH (people:Person)-[relatedTo]-(:Movie {\n"
      + "  title: 'Cloud Atlas'\n"
      + "})\n"
      + "RETURN people.name, type(relatedTo), relatedTo.roles");

  /**
   * {@link Query} for the <i>Cypher</i> statement on line 37 in {@code movie.cypher}.
   */
  public static final Query FIND_SIX_DEGREES_OF_KEVIN_BACON = new Query("MATCH (bacon:Person {\n"
      + "  name: 'Kevin Bacon'\n"
      + "})-[*1..6]-(hollywood)\n"
      + "RETURN DISTINCT hollywood");

  /**
   * {@link Query} for the <i>Cypher</i> statement on line 45 in {@code movie.cypher}.
   */
  public static final Query FIND_RECOMMENDED_TOM_HANKS_CO_ACTORS = new Query("MATCH (tom:Person {\n"
      + "  name: 'Tom Hanks'\n"
      + "})-[:ACTED_IN]->(m)<-[:ACTED_IN]-(coActors), (coActors)-[:ACTED_IN]->(m2)<-[:ACTED_IN]-(cocoActors)\n"
      + "WHERE (NOT (tom)-[:ACTED_IN]->()<-[:ACTED_IN]-(cocoActors)\n"
      + "  AND tom <> cocoActors)\n"
      + "RETURN cocoActors.name AS Recommended, count(*) AS Strength ORDER BY Strength DESC");

  /**
   * <i>Cypher</i> text for {@link #findPathFromKevinBaconTo}.
   */
  private static final String FIND_PATH_FROM_KEVIN_BACON_TO = "MATCH p = shortestPath((bacon:Person {\n"
      + "  name: 'Kevin Bacon'\n"
      + "})-[*]-(meg:Person {\n"
      + "  name: $name\n"
      + "}))\n"
      + "RETURN p";

  /**
   * <i>Cypher</i> text for {@link #findCoActorsBetweenTomHanksAnd}.
   */
  private static final String FIND_CO_ACTORS_BETWEEN_TOM_HANKS_AND = "MATCH (tom:Person {\n"
      + "  name: 'Tom Hanks'\n"
      + "})-[:ACTED_IN]->(m)<-[:ACTED_IN]-(coActors), (coActors)-[:ACTED_IN]->(m2)<-[:ACTED_IN]-(p:Person {\n"
      + "  name: $name\n"
      + "})\n"
      + "RETURN tom, m, coActors, m2, p";

  private MovieQueries() {
  }

  /**
   * {@link Query} for the <i>Cypher</i> statement on line 41 in {@code movie.cypher}.
   */
  public static Query findPathFromKevinBaconTo(Object name) {
    return new Query(FIND_PATH_FROM_KEVIN_BACON_TO, Values.parameters("name", name));
  }

  /**
   * {@link Query} for the <i>Cypher</i> statement on line 52 in {@code movie.cypher}.
   */
  public static Query findCoActorsBetweenTomHanksAnd(Object name) {
    return new Query(FIND_CO_ACTORS_BETWEEN_TOM_HANKS_AND, Values.parameters("name", name));
  }
}
